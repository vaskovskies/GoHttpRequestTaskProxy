// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/task": {
            "get": {
                "description": "Returns a JSON array of tasks. Can be supplied parameters status and httpStatusCode to select tasks with those parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "HTTP Status Code",
                        "name": "httpStatusCode",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/taskstore.Task"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a task on the server by providing the third-party serviceurl, method, headers and optionally a body. Returns a json containing the id of the task on success.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a task",
                "parameters": [
                    {
                        "description": "Task request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Deletes all tasks on the server. Requires authorization. Can be supplied parameters status and httpStatusCode to delete tasks with those parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete all tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "HTTP Status Code",
                        "name": "httpStatusCode",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/task/{id}": {
            "get": {
                "description": "A JSON task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get a task by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/taskstore.Task"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Returns 200 on success, 404 if the task does not exist and a bad request when the id is not a number.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a task with a specific id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "main.RequestBody": {
            "description": "Request body for creating a task",
            "type": "object",
            "properties": {
                "body": {
                    "description": "The body of the request (optional)",
                    "type": "string"
                },
                "headers": {
                    "description": "The headers to include in the request",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "method": {
                    "description": "The HTTP method (e.g., GET, POST)",
                    "type": "string"
                },
                "url": {
                    "description": "The URL of the third-party service",
                    "type": "string"
                }
            }
        },
        "taskstore.Task": {
            "description": "Task model",
            "type": "object",
            "properties": {
                "httpStatusCode": {
                    "description": "The httpStatusCode of the HTTP response or Internal Server Error (500) in case of server errors",
                    "type": "integer"
                },
                "id": {
                    "description": "The ID of the task",
                    "type": "integer"
                },
                "length": {
                    "description": "The content length of the HTTP response",
                    "type": "integer"
                },
                "requestHeaders": {
                    "description": "Json array containing the headers of the HTTP request (optional)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "request_body": {
                    "description": "The body of the HTTP request",
                    "type": "string"
                },
                "responseHeaders": {
                    "description": "Json array containing the headers of the HTTP response",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "response_body": {
                    "description": "The body of the HTTP response",
                    "type": "string"
                },
                "scheduledEndTime": {
                    "description": "The time and date at which the task was done processing",
                    "type": "string"
                },
                "scheduledStartTime": {
                    "description": "The time and date at which the task was sent to the server for processing",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the task:done/in-progress/error",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "GoHttpRequestTaskProxy",
	Description:      "This is an API that sends requests to third party services and stores the responses in a tasks database",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
